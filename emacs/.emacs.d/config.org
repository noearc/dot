#+TITLE: Emacs

* Global

#+BEGIN_SRC emacs-lisp
      (let ((minver "25.1"))
        (when (version< emacs-version minver)
          (error "Your Emacs is too old -- this config requires v%s or higher" minver)))
      (when (version< emacs-version "26.1")
        (message "Your Emacs is old, and some functionality in this config will be disabled. Please upgrade if possible."))

      (add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory)) ; 设定源码加载路径
      ;; (require 'init-benchmarking) ;; Measure startup time

      (defconst *spell-check-support-enabled* nil) ;; Enable with t if you prefer
      (defconst *is-a-mac* (eq system-type 'darwin))

      ;; Adjust garbage collection thresholds during startup, and thereafter

      (let ((normal-gc-cons-threshold (* 20 1024 1024))
            (init-gc-cons-threshold (* 128 1024 1024)))
        (setq gc-cons-threshold init-gc-cons-threshold)
        (add-hook 'emacs-startup-hook
                  (lambda () (setq gc-cons-threshold normal-gc-cons-threshold))))

;;    (setq confirm-kill-emacs #'yes-or-no-p)      ; 在关闭 Emacs 前询问是否确认关闭，防止误触
  ;;  (electric-pair-mode t)                       ; 自动补全括号
    (add-hook 'prog-mode-hook #'show-paren-mode) ; 编程模式下，光标在括号上时高亮另一个括号
    (column-number-mode t)                       ; 在 Mode line 上显示列号
    (global-auto-revert-mode t)                  ; 当另一程序修改了文件时，让 Emacs 及时刷新 Buffer
    (delete-selection-mode t)                    ; 选中文本后输入文本会替换文本（更符合我们习惯了的其它编辑器的逻辑）
    (setq inhibit-startup-message t)             ; 关闭启动 Emacs 时的欢迎界面
    (setq make-backup-files nil)                 ; 关闭文件自动备份
    (add-hook 'prog-mode-hook #'hs-minor-mode)   ; 编程模式下，可以折叠代码块
    (global-display-line-numbers-mode 1)         ; 在 Window 显示行号
    (tool-bar-mode -1)                           ; （熟练后可选）关闭 Tool bar
    (menu-bar-mode -1)                           ; （熟练后可选）关闭 Tool bar
    (when (display-graphic-p) (toggle-scroll-bar -1)) ; 图形界面时关闭滚动条

    (savehist-mode 1)                            ; （可选）打开 Buffer 历史记录保存
    (setq display-line-numbers-type 'relative)   ; （可选）显示相对行号
    (add-to-list 'default-frame-alist '(width . 90))  ; （可选）设定启动图形界面时的初始 Frame 宽度（字符数）
    (add-to-list 'default-frame-alist '(height . 55)) ; （可选）设定启动图形界面时的初始 Frame 高度（字符数）
    (pixel-scroll-precision-mode t)

    (global-set-key [escape] 'keyboard-escape-quit) ; quicker escape from minibuffer

#+END_SRC

* Package

#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-archives '(("gnu"    . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
                         ("nongnu" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/nongnu/")
                         ("melpa"  . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")))
(package-initialize)
;;(package-refresh-contents)
#+END_SRC

* Icons
#+begin_src emacs-lisp
  ;; TODO: werid???
   (use-package nerd-icons
  ;; but you can use any other Nerd Font if you want
  ;; (nerd-icons-font-family "Hasklug Nerd Font Mono")
  )
#+end_src

* Zoom

#+begin_src emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src


#+RESULTS:
: evil-window-up

* Evil
** evil
#+BEGIN_SRC emacs-lisp
    (use-package evil
      :init      ;; tweak evil's configuration before loading it
      (setq evil-want-integration t  ;; This is optional since it's already set to t by default.
            evil-want-keybinding nil
            evil-vsplit-window-right t
            evil-split-window-below t
            evil-undo-system 'undo-redo)  ;; Adds vim-like C-r redo functionality
      (evil-mode))
    ;; (use-package evil-terminal-cursor-changer)
    (evil-define-key 'insert 'global "jk" 'evil-normal-state)
    (evil-define-key 'normal 'global "H" 'evil-beginning-of-line)
    (evil-define-key 'normal 'global "L" 'evil-end-of-line)
    (unless (display-graphic-p)
          (require 'evil-terminal-cursor-changer)
          (evil-terminal-cursor-changer-activate) ; or (etcc-on)
          )

    (add-hook 'evil-insert-state-entry-hook (lambda () (send-string-to-terminal "\033[5 q")))
    (add-hook 'evil-insert-state-exit-hook  (lambda () (send-string-to-terminal "\033[2 q")))

    (use-package evil-collection
    :after evil
    :config
    ;; Do not uncomment this unless you want to specify each and every mode
    ;; that evil-collection should works with.  The following line is here 
    ;; for documentation purposes in case you need it.  
    ;; (setq evil-collection-mode-list '(calendar dashboard dired ediff info magit ibuffer))
    (add-to-list 'evil-collection-mode-list 'help) ;; evilify help mode
    (evil-collection-init))

  ;; Using RETURN to follow links in Org/Evil 
  ;; Unmap keys in 'evil-maps if not done, (setq org-return-follows-link t) will not work
  (with-eval-after-load 'evil-maps
    (define-key evil-motion-state-map (kbd "SPC") nil)
    (define-key evil-motion-state-map (kbd "RET") nil)
    (define-key evil-motion-state-map (kbd "TAB") nil))
  ;; Setting RETURN key in org-mode to follow links
    (setq org-return-follows-link  t)
#+END_SRC


** undo-tree
#+begin_src emacs-lisp
  (use-package undo-tree
   :ensure t
   :init (global-undo-tree-mode)
   :custom
   (undo-tree-auto-save-history nil)) 

#+end_src

** evil-easymotion
#+begin_src emacs-lisp
  ;; HACK: from doomemacs
   (use-package evil-easymotion
  ;;   :after-call doom-first-input-hook
     :commands evilem-create evilem-default-keybindings
     :config
     ;; Use evil-search backend, instead of isearch
     (evilem-make-motion evilem-motion-search-next #'evil-ex-search-next
                         :bind ((evil-ex-search-highlight-all nil)))
     (evilem-make-motion evilem-motion-search-previous #'evil-ex-search-previous
                         :bind ((evil-ex-search-highlight-all nil)))
     (evilem-make-motion evilem-motion-search-word-forward #'evil-ex-search-word-forward
                         :bind ((evil-ex-search-highlight-all nil)))
     (evilem-make-motion evilem-motion-search-word-backward #'evil-ex-search-word-backward
                         :bind ((evil-ex-search-highlight-all nil)))

     ;; Rebind scope of w/W/e/E/ge/gE evil-easymotion motions to the visible
     ;; buffer, rather than just the current line.
     (put 'visible 'bounds-of-thing-at-point (lambda () (cons (window-start) (window-end))))
     (evilem-make-motion evilem-motion-forward-word-begin #'evil-forward-word-begin :scope 'visible)
     (evilem-make-motion evilem-motion-forward-WORD-begin #'evil-forward-WORD-begin :scope 'visible)
     (evilem-make-motion evilem-motion-forward-word-end #'evil-forward-word-end :scope 'visible)
     (evilem-make-motion evilem-motion-forward-WORD-end #'evil-forward-WORD-end :scope 'visible)
     (evilem-make-motion evilem-motion-backward-word-begin #'evil-backward-word-begin :scope 'visible)
     (evilem-make-motion evilem-motion-backward-WORD-begin #'evil-backward-WORD-begin :scope 'visible)
     (evilem-make-motion evilem-motion-backward-word-end #'evil-backward-word-end :scope 'visible)
     (evilem-make-motion evilem-motion-backward-WORD-end #'evil-backward-WORD-end :scope 'visible))
#+end_src

#+RESULTS:
: t

* General
#+begin_src emacs-lisp
    (use-package general
    :config
    (general-evil-setup)

    ;; set up 'SPC' as the global leader key
    (general-create-definer dt/leader-keys
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC" ;; set leader
      :global-prefix "M-SPC") ;; access leader in insert mode

    (dt/leader-keys
      "SPC" '(counsel-M-x :wk "Counsel M-x")
      "." '(find-file :wk "Find file")
      "=" '(perspective-map :wk "Perspective") ;; Lists all the perspective keybindings
      "TAB TAB" '(comment-line :wk "Comment lines")
      "u" '(universal-argument :wk "Universal argument"))

    (dt/leader-keys
      "b" '(:ignore t :wk "Bookmarks/Buffers")
      "b b" '(switch-to-buffer :wk "Switch to buffer")
      "b c" '(clone-indirect-buffer :wk "Create indirect buffer copy in a split")
      "b C" '(clone-indirect-buffer-other-window :wk "Clone indirect buffer in new window")
      "b d" '(bookmark-delete :wk "Delete bookmark")
      "b i" '(ibuffer :wk "Ibuffer")
      "b k" '(kill-current-buffer :wk "Kill current buffer")
      "b K" '(kill-some-buffers :wk "Kill multiple buffers")
      "b l" '(list-bookmarks :wk "List bookmarks")
      "b m" '(bookmark-set :wk "Set bookmark")
      "b n" '(next-buffer :wk "Next buffer")
      "b p" '(previous-buffer :wk "Previous buffer")
      "b r" '(revert-buffer :wk "Reload buffer")
      "b R" '(rename-buffer :wk "Rename buffer")
      "b s" '(basic-save-buffer :wk "Save buffer")
      "b S" '(save-some-buffers :wk "Save multiple buffers")
      "b w" '(bookmark-save :wk "Save current bookmarks to bookmark file"))

    (dt/leader-keys
      "d" '(:ignore t :wk "Dired")
      "d d" '(dired :wk "Open dired")
      "d f" '(wdired-finish-edit :wk "Writable dired finish edit")
      "d j" '(dired-jump :wk "Dired jump to current")
      "d n" '(neotree-dir :wk "Open directory in neotree")
      "d p" '(peep-dired :wk "Peep-dired")
      "d w" '(wdired-change-to-wdired-mode :wk "Writable dired"))

    (dt/leader-keys
      "e" '(:ignore t :wk "Ediff/Eshell/Eval/EWW")    
      "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
      "e d" '(eval-defun :wk "Evaluate defun containing or after point")
      "e e" '(eval-expression :wk "Evaluate and elisp expression")
      "e f" '(ediff-files :wk "Run ediff on a pair of files")
      "e F" '(ediff-files3 :wk "Run ediff on three files")
      "e h" '(counsel-esh-history :which-key "Eshell history")
      "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
      "e r" '(eval-region :wk "Evaluate elisp in region")
      "e R" '(eww-reload :which-key "Reload current page in EWW")
      "e s" '(eshell :which-key "Eshell")
      "e w" '(eww :which-key "EWW emacs web wowser"))

    (dt/leader-keys
      "f" '(:ignore t :wk "Files")    
      "f c" '((lambda () (interactive)
                (find-file "~/.emacs.d/config.org")) 
              :wk "Open emacs config.org")
      "f e" '((lambda () (interactive)
                (dired "~/.config/emacs/")) 
              :wk "Open user-emacs-directory in dired")
      "f d" '(find-grep-dired :wk "Search for string in files in DIR")
      "f g" '(counsel-grep-or-swiper :wk "Search for string current file")
      "f i" '((lambda () (interactive)
                (find-file "~/.config/emacs/init.el")) 
              :wk "Open emacs init.el")
      "f j" '(counsel-file-jump :wk "Jump to a file below current directory")
      "f l" '(counsel-locate :wk "Locate a file")
      "f r" '(counsel-recentf :wk "Find recent files")
      "f u" '(sudo-edit-find-file :wk "Sudo find file")
      "f U" '(sudo-edit :wk "Sudo edit file"))

    (dt/leader-keys
      "g" '(:ignore t :wk "Git")    
      "g /" '(magit-displatch :wk "Magit dispatch")
      "g ." '(magit-file-displatch :wk "Magit file dispatch")
      "g b" '(magit-branch-checkout :wk "Switch branch")
      "g c" '(:ignore t :wk "Create") 
      "g c b" '(magit-branch-and-checkout :wk "Create branch and checkout")
      "g c c" '(magit-commit-create :wk "Create commit")
      "g c f" '(magit-commit-fixup :wk "Create fixup commit")
      "g C" '(magit-clone :wk "Clone repo")
      "g f" '(:ignore t :wk "Find") 
      "g f c" '(magit-show-commit :wk "Show commit")
      "g f f" '(magit-find-file :wk "Magit find file")
      "g f g" '(magit-find-git-config-file :wk "Find gitconfig file")
      "g F" '(magit-fetch :wk "Git fetch")
      "g g" '(magit-status :wk "Magit status")
      "g i" '(magit-init :wk "Initialize git repo")
      "g l" '(magit-log-buffer-file :wk "Magit buffer log")
      "g r" '(vc-revert :wk "Git revert file")
      "g s" '(magit-stage-file :wk "Git stage file")
      "g t" '(git-timemachine :wk "Git time machine")
      "g u" '(magit-stage-file :wk "Git unstage file"))

   (dt/leader-keys
      "h" '(:ignore t :wk "Help")
      "h a" '(counsel-apropos :wk "Apropos")
      "h b" '(describe-bindings :wk "Describe bindings")
      "h c" '(describe-char :wk "Describe character under cursor")
      "h d" '(:ignore t :wk "Emacs documentation")
      "h d a" '(about-emacs :wk "About Emacs")
      "h d d" '(view-emacs-debugging :wk "View Emacs debugging")
      "h d f" '(view-emacs-FAQ :wk "View Emacs FAQ")
      "h d m" '(info-emacs-manual :wk "The Emacs manual")
      "h d n" '(view-emacs-news :wk "View Emacs news")
      "h d o" '(describe-distribution :wk "How to obtain Emacs")
      "h d p" '(view-emacs-problems :wk "View Emacs problems")
      "h d t" '(view-emacs-todo :wk "View Emacs todo")
      "h d w" '(describe-no-warranty :wk "Describe no warranty")
      "h e" '(view-echo-area-messages :wk "View echo area messages")
      "h f" '(describe-function :wk "Describe function")
      "h F" '(describe-face :wk "Describe face")
      "h g" '(describe-gnu-project :wk "Describe GNU Project")
      "h i" '(info :wk "Info")
      "h I" '(describe-input-method :wk "Describe input method")
      "h k" '(describe-key :wk "Describe key")
      "h l" '(view-lossage :wk "Display recent keystrokes and the commands run")
      "h L" '(describe-language-environment :wk "Describe language environment")
      "h m" '(describe-mode :wk "Describe mode")
      "h r" '(:ignore t :wk "Reload")
      "h r r" '((lambda () (interactive)
                  (load-file "~/.config/emacs/init.el")
                  (ignore (elpaca-process-queues)))
                :wk "Reload emacs config")
      "h t" '(load-theme :wk "Load theme")
      "h v" '(describe-variable :wk "Describe variable")
      "h w" '(where-is :wk "Prints keybinding for command if set")
      "h x" '(describe-command :wk "Display full documentation for command"))

    (dt/leader-keys
      "m" '(:ignore t :wk "Org")
      "m a" '(org-agenda :wk "Org agenda")
      "m e" '(org-export-dispatch :wk "Org export dispatch")
      "m i" '(org-toggle-item :wk "Org toggle item")
      "m t" '(org-todo :wk "Org todo")
      "m B" '(org-babel-tangle :wk "Org babel tangle")
      "m T" '(org-todo-list :wk "Org todo list"))

    (dt/leader-keys
      "m b" '(:ignore t :wk "Tables")
      "m b -" '(org-table-insert-hline :wk "Insert hline in table"))

    (dt/leader-keys
      "m d" '(:ignore t :wk "Date/deadline")
      "m d t" '(org-time-stamp :wk "Org time stamp"))

    (dt/leader-keys
      "o" '(:ignore t :wk "Open")
      "o d" '(dashboard-open :wk "Dashboard")
      "o e" '(elfeed :wk "Elfeed RSS")
      "o f" '(make-frame :wk "Open buffer in new frame")
      "o F" '(select-frame-by-name :wk "Select frame by name"))

    ;; projectile-command-map already has a ton of bindings 
    ;; set for us, so no need to specify each individually.
    (dt/leader-keys
      "p" '(projectile-command-map :wk "Projectile"))

    (dt/leader-keys
      "r" '(:ignore t :wk "Radio")
      "r p" '(eradio-play :wk "Eradio play")
      "r s" '(eradio-stop :wk "Eradio stop")
      "r t" '(eradio-toggle :wk "Eradio toggle"))


    (dt/leader-keys
      "s" '(:ignore t :wk "Search")
      "s d" '(dictionary-search :wk "Search dictionary")
      "s m" '(man :wk "Man pages")
      "s o" '(pdf-occur :wk "Pdf search lines matching STRING")
      "s t" '(tldr :wk "Lookup TLDR docs for a command")
      "s w" '(woman :wk "Similar to man but doesn't require man"))

    (dt/leader-keys
      "t" '(:ignore t :wk "Toggle")
      "t e" '(eshell-toggle :wk "Toggle eshell")
      "t f" '(flycheck-mode :wk "Toggle flycheck")
      "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
      "t n" '(neotree-toggle :wk "Toggle neotree file viewer")
      "t o" '(org-mode :wk "Toggle org mode")
      "t r" '(rainbow-mode :wk "Toggle rainbow mode")
      "t t" '(visual-line-mode :wk "Toggle truncated lines")
      "t v" '(vterm-toggle :wk "Toggle vterm"))

    (dt/leader-keys
      "w" '(:ignore t :wk "Windows/Words")
      ;; Window splits
      "w c" '(evil-window-delete :wk "Close window")
      "w n" '(evil-window-new :wk "New window")
      "w s" '(evil-window-split :wk "Horizontal split window")
      "w v" '(evil-window-vsplit :wk "Vertical split window")
      ;; Window motions
      "w h" '(evil-window-left :wk "Window left")
      "w j" '(evil-window-down :wk "Window down")
      "w k" '(evil-window-up :wk "Window up")
      "w l" '(evil-window-right :wk "Window right")
      "w w" '(evil-window-next :wk "Goto next window")
      ;; Move Windows
      "w H" '(buf-move-left :wk "Buffer move left")
      "w J" '(buf-move-down :wk "Buffer move down")
      "w K" '(buf-move-up :wk "Buffer move up")
      "w L" '(buf-move-right :wk "Buffer move right")
      ;; Words
      "w d" '(downcase-word :wk "Downcase word")
      "w u" '(upcase-word :wk "Upcase word")
      "w =" '(count-words :wk "Count words/lines for buffer"))

  )

#+end_src

#+RESULTS:
: t

* Company
Company is a text completion framework for Emacs. The name stands for “complete anything”.  Completion will start automatically after you type a few letters. Use M-n and M-p to select, <return> to complete or <tab> to complete the common part.

#+begin_src emacs-lisp
  (use-package company
    :defer 2
    :diminish
    :custom
    (company-begin-commands '(self-insert-command))
    (company-idle-delay .1)
    (company-minimum-prefix-length 2)
    (company-show-numbers t)
    (company-tooltip-align-annotations 't)
    (global-company-mode t))

  (use-package company-box
    :after company
    :diminish
    :hook (company-mode . company-box-mode))
#+end_src

#+RESULTS:
| company-box-mode | company-mode-set-explicitly |

* Modeline
** doom-modeline
#+begin_src emacs-lisp
 (use-package doom-modeline
  :ensure t
  :hook (after-init . doom-modeline-mode))
#+end_src

* Themes

#+begin_src emacs-lisp
  (use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-one t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src

#+RESULTS:
: t

* Fonts

#+begin_src emacs-lisp
(set-face-attribute 'default nil
  :font "Hasklug Nerd Font Mono"
  :height 110
  :weight 'medium)
;;(set-face-attribute 'variable-pitch nil
  ;;:font "Ubuntu"
  ;;:height 120
  ;;:weight 'medium)
;;(set-face-attribute 'fixed-pitch nil
  ;;:font "JetBrains Mono"
  ;;:height 110
  ;;:weight 'medium)
;; Makes commented text and keywords italics.
;; This is working in emacsclient but not emacs.
;; Your font must have an italic face available.
(set-face-attribute 'font-lock-comment-face nil
  :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil
  :slant 'italic)

;; This sets the default font on all graphical frames created after restarting Emacs.
;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
;; are not right unless I also add this method of setting the default font.
(add-to-list 'default-frame-alist '(font . "JetBrains Mono-11"))

;; Uncomment the following line if line spacing needs adjusting.
(setq-default line-spacing 0.12)
#+end_src

* Which-key

#+begin_src emacs-lisp
(use-package which-key
  :init
    (which-key-mode 1)
  :diminish
  :config
  (setq which-key-side-window-location 'bottom
	  which-key-sort-order #'which-key-key-order-alpha
	  which-key-allow-imprecise-window-fit nil
	  which-key-sort-uppercase-first nil
	  which-key-add-column-padding 1
	  which-key-max-display-columns nil
	  which-key-min-display-lines 6
	  which-key-side-window-slot -10
	  which-key-side-window-max-height 0.25
	  which-key-idle-delay 0.8
	  which-key-max-description-length 25
	  which-key-allow-imprecise-window-fit nil
	  which-key-separator " → " ))
#+end_src

#+RESULTS:
: t

* Magit
#+begin_src emacs-lisp
  (use-package magit)
#+end_src

#+RESULTS:

* Ivy
#+begin_src emacs-lisp
  (use-package counsel
  :after ivy
  :diminish
  :config 
    (counsel-mode)
    (setq ivy-initial-inputs-alist nil)) ;; removes starting ^ regex in M-x

(use-package ivy
  :bind
  ;; ivy-resume resumes the last Ivy-based completion.
  (("C-c C-r" . ivy-resume)
   ("C-x B" . ivy-switch-buffer-other-window))
  :diminish
  :custom
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)
  :config
  (ivy-mode))

(use-package all-the-icons-ivy-rich
  :ensure t
  :init (all-the-icons-ivy-rich-mode 1))

(use-package ivy-rich
  :after ivy
  :ensure t
  :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
  :custom
  (ivy-virtual-abbreviate 'full
   ivy-rich-switch-buffer-align-virtual-buffer t
   ivy-rich-path-style 'abbrev)
  :config
  (ivy-set-display-transformer 'ivy-switch-buffer
                               'ivy-rich-switch-buffer-transformer))

#+end_src


* amx
#+begin_src emacs-lisp
  (use-package amx
    :ensure t
    :init (amx-mode))

#+end_src

#+RESULTS:

* Shell and Term
#+begin_src emacs-lisp
 (use-package eshell-toggle
  :custom
  (eshell-toggle-size-fraction 3)
  (eshell-toggle-use-projectile-root t)
  (eshell-toggle-run-command nil)
  (eshell-toggle-init-function #'eshell-toggle-init-ansi-term))

  (use-package eshell-syntax-highlighting
    :after esh-mode
    :config
    (eshell-syntax-highlighting-global-mode +1))

  ;; eshell-syntax-highlighting -- adds fish/zsh-like syntax highlighting.
  ;; eshell-rc-script -- your profile for eshell; like a bashrc for eshell.
  ;; eshell-aliases-file -- sets an aliases file for the eshell.

  (setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
        eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
        eshell-history-size 5000
        eshell-buffer-maximum-lines 5000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t
        eshell-destroy-buffer-when-process-dies t
        eshell-visual-commands'("bash" "fish" "htop" "ssh" "top" "zsh")) 

#+end_src

#+RESULTS:
| bash | fish | htop | ssh | top | zsh |

* Org Mode
** org-bullets
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

#+end_src
** org-tempo
| <s | src   |
| <a | ascii |
#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src

** toc-org
#+begin_src emacs-lisp
 (use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable)) 

#+end_src
* Lang
#+begin_src emacs-lisp
  (use-package haskell-mode)
  (use-package lua-mode)

#+end_src

* ZH
#+begin_src emacs-lisp
;;(use-package rime
;;  :custom
;;  (default-input-method "rime"))
#+end_src

* LSP
#+begin_src emacs-lisp
  (use-package lsp-mode
  :init
  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
  (setq lsp-keymap-prefix "C-c l")
  :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
         (XXX-mode . lsp)
         ;; if you want which-key integration
         (lsp-mode . lsp-enable-which-key-integration))
  :commands lsp)

;; optionally
(use-package lsp-ui :commands lsp-ui-mode)
;; if you are helm user
;;(use-package helm-lsp :commands helm-lsp-workspace-symbol)
;; if you are ivy user
(use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
;;(use-package lsp-treemacs :commands lsp-treemacs-errors-list)

;; optionally if you want to use debugger
;;(use-package dap-mode)
;; (use-package dap-LANGUAGE) to load the dap adapter for your language

#+end_src

* elfeed
#+begin_src emacs-lisp
    (setq elfeed-feeds
        '("https://sspai.com/feed" "https://consequence.net/feed/" "https://archlinux.org/feeds/news/" "https://abeautifulmess.com/feed/"))
#+end_src

#+RESULTS:
| https://sspai.com/feed | https://consequence.net/feed/ | https://archlinux.org/feeds/news/ |

* mu4e
#+begin_src emacs-lisp
  (use-package mu4e
    :ensure nil
    :load-path "/usr/share/emacs/site-lisp/mu4e/"
    )
#+end_src
